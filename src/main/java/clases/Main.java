/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.util.ArrayList;
import java.util.Collections;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

public class Main {
    
    public static void main (String [] args) {
		ArrayList<Libro> catalogo = new ArrayList<Libro>(); 	
    	while (true) {
			int opcion = menu();
			switch (opcion) {
			case 1:
				//TODO Alta de Libros
				//TODO titulo:ibsn:genero:paginas
				alta(catalogo);
				break;
			case 2:
				//TODO Lista de Libros
				listaDeLibros(catalogo);
				break;
			case 3:
				//TODO Baja de libros
				bajaDeLibros(catalogo);
				break;
				
			case 4:
				//TODO Busqueda de libros
				busquedaDeLibros(catalogo);
				break;
				
			case 5:
				//TODO Ordenacion de libros
				System.out.println(catalogo.size());
				break;
			case 6:
				//TODO Crear fichero
				break;
			case 7:
				//TODO vaciar catalogo
				break;
			}
			
				
		}
	}
    
    private static int menu() {
    	int opcion=0;
    	
    	do {
    		System.out.println("Opciones:");
    		System.out.println("1. Alta de Libro");
    		System.out.println("2. Lista de Libros");
    		System.out.println("3. Baja de Libros");
    		System.out.println("4. BÃºsqueda de Libros");
    		System.out.println("5. Ordenacion de Libros");
    		System.out.println("Introduce la opcion:");
    	
    		opcion = leerOpcion(4);
    		
    	}while(opcion <=0);
    	
    	return opcion;
    }
    
    private static int leerOpcion(int max) {
    	int opcion = -1;
    	@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
    	try {
        	opcion = sc.nextInt();
		} catch (InputMismatchException e) {
			System.out.println("La opcion no es correcta");
			if(opcion > max) {
				opcion = -1;
			}
		}    	
//    	sc.close();
    	return opcion;
    }
    
    private static String leerCadena() {
    	String opcion = null;
    	@SuppressWarnings("resource")
		Scanner sc = new Scanner(System.in);
    	try {
        	opcion = sc.nextLine();
		} catch (InputMismatchException e) {
			System.out.println("La opcion no es correcta");
			
			}
    	return opcion;
		}
    
    private static Libro procesaEntrada(String entrada) {
    	Libro libro = null;
    	
    	String [] datos = entrada.split(":");
    	
    	String titulo = datos[0];
    	String isbn = datos[1];
    	Genero genero = Genero.getGenero(datos[2]);
    	String autor = datos[3];
    	Integer paginas = Integer.parseInt(datos[4]);
    	
    	libro = new Libro(titulo,isbn,genero,autor,paginas);
    	
    	return libro;
    }
    
    private static void alta(ArrayList<Libro> catalogo) {
    	//Leer de la entrada
    	String datosLibro = obtenerDatosLibro();
    	//titulo:isbn:genero:autor:paginas
    	//Procesar la entrada
    	Libro libro = procesaEntrada(datosLibro);
    	//Crear el libro con los datos de la entrada
    	catalogo.add(libro);
    	//Meter el libro en el catalogo
    }
    
    private static String obtenerDatosLibro() {
    	String datos=null;
    	
    	boolean validado=false;
    	while(!validado) {
    		System.out.println("Introduce los datos de un libro.");
    		System.out.println("Usa el formato \"titulo:isbn:genero:autor:paginas\"");
    		try {
    			datos = leerCadena();
    			if(true)//Supongo de momento que valida siempre
    				validado=true;
    		}catch (InputMismatchException e) {
				System.out.println("Datos de entrada no validos");
			}
    	}
    	
    	return datos;
    }
    //Don Quijote:46N5fdB45Ajya4:Ficcion:Miguel de Cervantes:523
    //Platero y yo:64gr98f6kj423j4:Novela:Miguel de Cervantes:256
    //La Celestina:88f6dg4h9w47:Novela:Fernando de Rojas:365
    
    private static void listaDeLibros(ArrayList<Libro> catalogo){
    	for (int i = 0; i < catalogo.size(); i++) {
    	     Libro libro = catalogo.get(i);
    	     System.out.print((i+1)+"."); 
    	     System.out.println(libro);
    	      System.out.println("---------------------------------------------------------");
    	    }
    	if(catalogo.size()==0) {
    		System.out.println("El catalogo esta vacio");
    	}
    }
        
    private static void bajaDeLibros(ArrayList<Libro> catalogo) {
    	Scanner sc = new Scanner(System.in);
    	int seleccion = 0;
   	
    	do {
    		System.out.println("Introduzca la posicion del libro que quiere borrar");
        	seleccion = sc.nextInt();
        	if(seleccion>catalogo.size()) {
    		System.out.println("Posicion incorrecta, introduce una posicion valida");
        	}
        }while(seleccion>catalogo.size());
    	catalogo.remove(seleccion);
    }
    
    private static void busquedaDeLibros(ArrayList<Libro> catalogo) {
    	String isbn = "";
    	Scanner sc = new Scanner(System.in);	
    	System.out.println("Introduzca el isbn del libro a buscar");
    	isbn = sc.next();
    	
    	Libro l = new Libro();
    	l.setIsbn(isbn);
    	
    	int posicion = 0;
    	posicion = catalogo.indexOf(l);
    	if( posicion< 0){
    		System.out.println("El libro no se encuentra en nuestro catalogo");
    	}
    	else {
    		System.out.println(catalogo.get(posicion));
    	}
    }
    
    private static void ordenarLibros(ArrayList<Libro> catalogo) {
    	Scanner sc = new Scanner(System.in);
    	int opcion = 0;
    	do {
    	System.out.println("Elige como quieres ordenar el catalogo:\n"
    			+ "1.Titulo(alfabeticamente)\n2.Numero de paginas");
    	opcion = sc.nextInt();
    	if(opcion == 1) {
    	Collections.sort((List) catalogo);
    	}
    	else {
    		//TODO Collections.sort((List)catalogo,compareto NUM PAGINAS en libro);
    	}
    	}while(opcion<=2 && 1<=opcion);
    }
    
    private static void vaciarCatalogo(ArrayList<Libro> catalogo) {
    	for(int i = 0; i<catalogo.size();i++) {
    	catalogo.remove(i);
    	}
    }
    
}
